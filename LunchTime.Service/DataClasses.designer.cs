#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LunchTime.Service
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LunchTime")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArrivalTime(ArrivalTime instance);
    partial void UpdateArrivalTime(ArrivalTime instance);
    partial void DeleteArrivalTime(ArrivalTime instance);
    partial void InsertRestaurant(Restaurant instance);
    partial void UpdateRestaurant(Restaurant instance);
    partial void DeleteRestaurant(Restaurant instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["LunchTimeConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ArrivalTime> ArrivalTimes
		{
			get
			{
				return this.GetTable<ArrivalTime>();
			}
		}
		
		public System.Data.Linq.Table<Restaurant> Restaurants
		{
			get
			{
				return this.GetTable<Restaurant>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArrivalTimes")]
	public partial class ArrivalTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ArrivalTimesId;
		
		private int _RestaurantId;
		
		private System.DateTime _TimeArrived;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.TimeSpan> _Time;
		
		private EntityRef<Restaurant> _Restaurant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArrivalTimesIdChanging(int value);
    partial void OnArrivalTimesIdChanged();
    partial void OnRestaurantIdChanging(int value);
    partial void OnRestaurantIdChanged();
    partial void OnTimeArrivedChanging(System.DateTime value);
    partial void OnTimeArrivedChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnTimeChanged();
    #endregion
		
		public ArrivalTime()
		{
			this._Restaurant = default(EntityRef<Restaurant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalTimesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ArrivalTimesId
		{
			get
			{
				return this._ArrivalTimesId;
			}
			set
			{
				if ((this._ArrivalTimesId != value))
				{
					this.OnArrivalTimesIdChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTimesId = value;
					this.SendPropertyChanged("ArrivalTimesId");
					this.OnArrivalTimesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestaurantId", DbType="Int NOT NULL")]
		public int RestaurantId
		{
			get
			{
				return this._RestaurantId;
			}
			set
			{
				if ((this._RestaurantId != value))
				{
					if (this._Restaurant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRestaurantIdChanging(value);
					this.SendPropertyChanging();
					this._RestaurantId = value;
					this.SendPropertyChanged("RestaurantId");
					this.OnRestaurantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ArrivalTime", Storage="_TimeArrived", DbType="DateTime NOT NULL")]
		public System.DateTime TimeArrived
		{
			get
			{
				return this._TimeArrived;
			}
			set
			{
				if ((this._TimeArrived != value))
				{
					this.OnTimeArrivedChanging(value);
					this.SendPropertyChanging();
					this._TimeArrived = value;
					this.SendPropertyChanged("TimeArrived");
					this.OnTimeArrivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", AutoSync=AutoSync.Always, DbType="Date", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", AutoSync=AutoSync.Always, DbType="Time", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.TimeSpan> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_ArrivalTime", Storage="_Restaurant", ThisKey="RestaurantId", OtherKey="RestaurantId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Restaurant Restaurant
		{
			get
			{
				return this._Restaurant.Entity;
			}
			set
			{
				Restaurant previousValue = this._Restaurant.Entity;
				if (((previousValue != value) 
							|| (this._Restaurant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Restaurant.Entity = null;
						previousValue.ArrivalTimes.Remove(this);
					}
					this._Restaurant.Entity = value;
					if ((value != null))
					{
						value.ArrivalTimes.Add(this);
						this._RestaurantId = value.RestaurantId;
					}
					else
					{
						this._RestaurantId = default(int);
					}
					this.SendPropertyChanged("Restaurant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Restaurants")]
	public partial class Restaurant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RestaurantId;
		
		private string _Name;
		
		private EntitySet<ArrivalTime> _ArrivalTimes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRestaurantIdChanging(int value);
    partial void OnRestaurantIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Restaurant()
		{
			this._ArrivalTimes = new EntitySet<ArrivalTime>(new Action<ArrivalTime>(this.attach_ArrivalTimes), new Action<ArrivalTime>(this.detach_ArrivalTimes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RestaurantId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RestaurantId
		{
			get
			{
				return this._RestaurantId;
			}
			set
			{
				if ((this._RestaurantId != value))
				{
					this.OnRestaurantIdChanging(value);
					this.SendPropertyChanging();
					this._RestaurantId = value;
					this.SendPropertyChanged("RestaurantId");
					this.OnRestaurantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Restaurant_ArrivalTime", Storage="_ArrivalTimes", ThisKey="RestaurantId", OtherKey="RestaurantId")]
		public EntitySet<ArrivalTime> ArrivalTimes
		{
			get
			{
				return this._ArrivalTimes;
			}
			set
			{
				this._ArrivalTimes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArrivalTimes(ArrivalTime entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = this;
		}
		
		private void detach_ArrivalTimes(ArrivalTime entity)
		{
			this.SendPropertyChanging();
			entity.Restaurant = null;
		}
	}
}
#pragma warning restore 1591
